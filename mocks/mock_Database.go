// Code generated by mockery v2.53.0. DO NOT EDIT.

package ports

import (
	context "context"
	ports "kdb/internal/ports"

	mock "github.com/stretchr/testify/mock"
)

// MockDatabase is an autogenerated mock type for the Database type
type MockDatabase struct {
	mock.Mock
}

type MockDatabase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDatabase) EXPECT() *MockDatabase_Expecter {
	return &MockDatabase_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, commandStr
func (_m *MockDatabase) Execute(ctx context.Context, commandStr string) (*ports.Result, error) {
	ret := _m.Called(ctx, commandStr)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *ports.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*ports.Result, error)); ok {
		return rf(ctx, commandStr)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *ports.Result); ok {
		r0 = rf(ctx, commandStr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ports.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, commandStr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockDatabase_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - commandStr string
func (_e *MockDatabase_Expecter) Execute(ctx interface{}, commandStr interface{}) *MockDatabase_Execute_Call {
	return &MockDatabase_Execute_Call{Call: _e.mock.On("Execute", ctx, commandStr)}
}

func (_c *MockDatabase_Execute_Call) Run(run func(ctx context.Context, commandStr string)) *MockDatabase_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatabase_Execute_Call) Return(_a0 *ports.Result, _a1 error) *MockDatabase_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_Execute_Call) RunAndReturn(run func(context.Context, string) (*ports.Result, error)) *MockDatabase_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDatabase creates a new instance of MockDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDatabase {
	mock := &MockDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
